/*
  SASS variables are information about icon's compiled state, stored under its original file name

  .icon-home
    width: $icon-home-width

  The large array-like variables contain all information about a single icon
  $icon-home: x y offset_x offset_y width height total_width total_height image_path

  At the bottom of this section, we provide information about the spritesheet itself
  $spritesheet: width height image $spritesheet-sprites
  */
$ico1-name: 'ico1'
$ico1-x: 0px
$ico1-y: 0px
$ico1-offset-x: 0px
$ico1-offset-y: 0px
$ico1-width: 100px
$ico1-height: 100px
$ico1-total-width: 300px
$ico1-total-height: 200px
$ico1-image: 'sprite.png'
$ico1: (0px, 0px, 0px, 0px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico1', )
$ico2-name: 'ico2'
$ico2-x: 100px
$ico2-y: 0px
$ico2-offset-x: -100px
$ico2-offset-y: 0px
$ico2-width: 100px
$ico2-height: 100px
$ico2-total-width: 300px
$ico2-total-height: 200px
$ico2-image: 'sprite.png'
$ico2: (100px, 0px, -100px, 0px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico2', )
$ico3-name: 'ico3'
$ico3-x: 0px
$ico3-y: 100px
$ico3-offset-x: 0px
$ico3-offset-y: -100px
$ico3-width: 100px
$ico3-height: 100px
$ico3-total-width: 300px
$ico3-total-height: 200px
$ico3-image: 'sprite.png'
$ico3: (0px, 100px, 0px, -100px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico3', )
$ico4-name: 'ico4'
$ico4-x: 100px
$ico4-y: 100px
$ico4-offset-x: -100px
$ico4-offset-y: -100px
$ico4-width: 100px
$ico4-height: 100px
$ico4-total-width: 300px
$ico4-total-height: 200px
$ico4-image: 'sprite.png'
$ico4: (100px, 100px, -100px, -100px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico4', )
$ico5-name: 'ico5'
$ico5-x: 200px
$ico5-y: 0px
$ico5-offset-x: -200px
$ico5-offset-y: 0px
$ico5-width: 100px
$ico5-height: 100px
$ico5-total-width: 300px
$ico5-total-height: 200px
$ico5-image: 'sprite.png'
$ico5: (200px, 0px, -200px, 0px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico5', )
$ico6-name: 'ico6'
$ico6-x: 200px
$ico6-y: 100px
$ico6-offset-x: -200px
$ico6-offset-y: -100px
$ico6-width: 100px
$ico6-height: 100px
$ico6-total-width: 300px
$ico6-total-height: 200px
$ico6-image: 'sprite.png'
$ico6: (200px, 100px, -200px, -100px, 100px, 100px, 300px, 200px, 'sprite.png', 'ico6', )
$spritesheet-width: 300px
$spritesheet-height: 200px
$spritesheet-image: 'sprite.png'
$spritesheet-sprites: ($ico1, $ico2, $ico3, $ico4, $ico5, $ico6, )
$spritesheet: (300px, 200px, 'sprite.png', $spritesheet-sprites, )

/*
  The provided mixins are intended to be used with the array-like variables

  .icon-home
    @include sprite-width($icon-home)

  .icon-email
    @include sprite($icon-email)

  Example usage in HTML:
    `display: block` sprite:
    <div class="icon-home"></div>

  To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
    // CSS
    .icon {
      display: inline-block;
    }

    // HTML
    <i class="icon icon-home"></i>
  */
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

/*
  The `sprites` mixin generates identical output to the CSS template
    but can be overridden inside of SASS

  @include sprites($spritesheet-sprites)
  */
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
